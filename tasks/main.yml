---
- name: check apparmor rule
  stat:
    path: "{{ rsyslog__apparmor_rules_path }}{{ rsyslog__apparmor_rule_name }}"
  register: rsyslog_apparmor_rule

- name: disable apparmor rule
  block:
    - name: create disabled rules dir
      file:
        path: "{{ rsyslog__apparmor_rules_path }}disable/"
        state: directory

    - name: link rule to disable
      file:
        src: "{{ rsyslog__apparmor_rules_path }}{{ rsyslog__apparmor_rule_name }}"
        path: "{{ rsyslog__apparmor_rules_path }}disable/{{ rsyslog__apparmor_rule_name }}"
        state: link

    - name: reload all profiles
      systemd:
        name: 'apparmor'
        state: 'reloaded'

  # end block
  when: (rsyslog_apparmor_rule is defined and rsyslog_apparmor_rule.stat.exists)

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - '{{ rsyslog__base_packages }}'
    - '{{ rsyslog__tls_packages if rsyslog__pki|bool else [] }}'
    - '{{ rsyslog__packages }}'
  when: rsyslog__enabled|bool and ansible_os_family == 'Debian'

- name: Create required system group
  group:
    name: '{{ rsyslog__group }}'
    state: 'present'
    system: True
  when: rsyslog__unprivileged|bool and rsyslog__group != 'root'

- name: Create required system user
  user:
    name: '{{ rsyslog__user }}'
    group: '{{ rsyslog__group }}'
    groups: '{{ rsyslog__append_groups | join(",") | default(omit) }}'
    append: True
    home: '{{ rsyslog__home }}'
    shell: '/bin/false'
    state: 'present'
    createhome: False
    system: True
  when: rsyslog__unprivileged|bool and rsyslog__user != 'root'

- name: Fix directory permissions if needed
  file:
    path: '/var/spool/rsyslog'
    state: 'directory'
    owner: '{{ rsyslog__user }}'
    group: '{{ rsyslog__file_group }}'
    mode: '0700'
  register: rsyslog__register_unprivileged_files
  when: rsyslog__unprivileged|bool and rsyslog__user != 'root'

- name: Update directory and file permissions
  shell: |
    [ ! -d {{ rsyslog__home }} ] || ( [ "$(stat -c '%G' {{ rsyslog__home }})" = "{{ rsyslog__group }}" ] || ( chown -v root:{{ rsyslog__group }} {{ rsyslog__home }} ; chmod -v 775 {{ rsyslog__home }} ) )
    for i in {{ rsyslog__default_logfiles | join(" ") }} ; do
      [ ! -f ${i} ] || ( [ "$(stat -c '%U' ${i})" = "{{ rsyslog__file_owner }}" ] || chown -v {{ rsyslog__file_owner }}:{{ rsyslog__file_group }} ${i} )
    done
  register: rsyslog__register_file_permissions
  when: rsyslog__unprivileged|bool
  changed_when: rsyslog__register_file_permissions.stdout != ''
  notify: [ 'Restart rsyslogd' ]

- name: Divert main rsyslog configuration
  command: dpkg-divert --quiet --local --divert /etc/rsyslog.conf.dpkg-divert --rename /etc/rsyslog.conf
  args:
    creates: '/etc/rsyslog.conf.dpkg-divert'
  when: rsyslog__enabled|bool and ansible_os_family == 'Debian'
  notify: [ 'Restart rsyslogd' ]

- name: Generate main rsyslog configuration
  template:
    src: 'etc/rsyslog.conf.j2'
    dest: '/etc/rsyslog.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart rsyslogd' ]
  when: rsyslog__enabled|bool

- name: Revert the default configuration file
  shell: rm -f /etc/rsyslog.conf ; dpkg-divert --quiet --local --rename --remove /etc/rsyslog.conf
  args:
    removes: '/etc/rsyslog.conf.dpkg-divert'
    warn: False
  when: not rsyslog__enabled|bool

- name: Set custom rules
  include: rules.yml